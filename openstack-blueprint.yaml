tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/elk_stack.yaml
  - imports/elk-blueprint.yaml
  - types/cloud_config/cloud-config.yaml

inputs:

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: { get_secret: small_image_flavor }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

node_types:

  elk.nodes.MonitoredServer:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      openstack_config:
        default: *openstack_config
      agent_config:
        default:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
      server:
        default:
          key_name: ''
          image: { get_input: image }
          flavor: { get_input: flavor }
      management_network_name:
        default: { get_property: [ public_network, resource_id ] }
    interfaces:
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              default:
                image: { get_input: image }
                flavor: { get_input: flavor }
                userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

node_templates:

  elasticsearch_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - target: elasticsearch_host_port
        type: cloudify.openstack.server_connected_to_port

  logstash_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - target: logstash_host_port
        type: cloudify.openstack.server_connected_to_port

  kibana_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - target: kibana_host_port
        type: cloudify.openstack.server_connected_to_port

  rabbitmq_master_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - target: rabbitmq_master_host_port
        type: cloudify.openstack.server_connected_to_port

  rabbitmq_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - target: rabbitmq_host_port
        type: cloudify.openstack.server_connected_to_port

  kibana_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: kibana_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: kibana_floatingip

  logstash_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: logstash_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: logstash_floatingip

  elasticsearch_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: elasticsearch_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: elasticsearch_floatingip

  rabbitmq_master_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: rabbitmq_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: rabbitmq_master_floatingip

  rabbitmq_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: rabbitmq_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: rabbitmq_floatingip

  elasticsearch_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: elasticsearch_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ elasticsearch, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 9200
        - remote_ip_prefix: 0.0.0.0/0
          port: 54328
          protocol: udp

  logstash_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: logstash_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ logstash, port ] }

  kibana_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: kibana_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ kibana, port ] }

  rabbitmq_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: rabbitmq_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ rabbitmq, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 54328
        - remote_ip_prefix: 0.0.0.0/0
          port: 15672
        - remote_ip_prefix: 0.0.0.0/0
          port: 5672
        - remote_ip_prefix: 0.0.0.0/0
          port: 25672

  ssh_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: ssh_security_group
        description: SSH Group
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_name }
    relationships:
      - target: private_network
        type: cloudify.relationships.contained_in

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_network_name }

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: external_network_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudConfig
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            cloud_config:
              users:
                - name: { get_input: agent_user }
                  shell: /bin/bash
                  sudo: ['ALL=(ALL) NOPASSWD:ALL']
                  ssh-authorized-keys:
                    - { get_secret: agent_key_public }

  rabbitmq_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  rabbitmq_master_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  elasticsearch_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  logstash_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  kibana_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

outputs:

  elasticsearch_endpoint:
    description: Elasticsearch endpoint
    value:
      ip_address: { get_attribute: [ elasticsearch_floatingip, floating_ip_address ] }
      port: { get_property: [ elasticsearch, port ] }

  logstash_endpoint:
    description: Logstash endpoint
    value:    
      
      ip_address: { get_attribute: [ logstash_floatingip, floating_ip_address ] }
      port: { get_property: [ logstash, port ] }

  kibana_endpoint:
    description: Kibana endpoint
    value:    
      ip_address: { get_attribute: [ kibana_floatingip, floating_ip_address ] }
      port: { get_property: [ kibana, port ] }

  rabbitmq_endpoint:
    description: RabbitMQ endpoint
    value:    
      ip_address: { get_attribute: [ rabbitmq_floatingip, floating_ip_address ] }
      port: { get_property: [ rabbitmq, port ] } 

  rabbitmq_master_endpoint:
    description: RabbitMQ_Master endpoint
    value:    
      ip_address: { get_attribute: [ rabbitmq_master_floatingip, floating_ip_address ] }
      port: { get_property: [ rabbitmq_master, port ] }
