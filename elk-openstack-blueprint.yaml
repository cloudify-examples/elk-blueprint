###########################################################
# This Blueprint installs the ELK Stack
# on an openstack cloud environment.
###########################################################

tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/elk_stack.yaml
  - imports/elk-blueprint.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  flavor:
    description: >
      Flavor of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's

  key_name:
    description: >
      the agent public key name (created during manager bootstrap)
    type: string
    default: elk-blueprint-key

  private_key_path:
    type: string
    default: ~/.ssh/elk-blueprint-key.pem

  region:
    default: ''

  external_network_name:
    type: string
    default: external

  router_name:
    description: The Router Name

  public_network_name:
    description: The name of the Openstack public network.

  public_subnet_name:
    description: The name of the public network subnet.

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: region }

node_types:

  ###########################################################
  # We define a type that inherits openstack's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################

  elk.nodes.MonitoredServer:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      openstack_config:
        default:
          *openstack_config
      agent_config:
        default:
          user: { get_input: agent_user }
          key: { get_property: [ key, private_key_path ] }
          install_method: remote
          port: 22
      server:
        default:
          image: { get_input: image }
          flavor: { get_input: flavor }
      management_network_name:
        default:
          { get_property: [ public_network, resource_id ] }
    interfaces:

      ###########################################################
      # We are in fact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################

      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall

      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

 ########## Hosts ###################

  elasticsearch_host:
    type: elk.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          default_instances: 1
    relationships:
      ###########################################################
      # Attaching a floating ip to each elasticsearch host
      ###########################################################
      #$$ Remove before commit
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: elasticsearch_host_port
        type: cloudify.openstack.server_connected_to_port

  logstash_host:
    type: elk.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Attaching a floating ip to the logstash host
      ###########################################################
      #$$ Remove before commit
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: logstash_host_port
        type: cloudify.openstack.server_connected_to_port

  kibana_host:
    type: elk.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Attaching a floating ip to the kibana host
      ###########################################################

      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: kibana_host_port
        type: cloudify.openstack.server_connected_to_port

  rabbitmq_master_host:
    type: elk.nodes.MonitoredServer
    relationships:
      ###########################################################
      # Attaching a floating ip to each rabbitmq_ host
      ###########################################################

      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: rabbitmq_master_host_port
        type: cloudify.openstack.server_connected_to_port

  rabbitmq_host:
    type: elk.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          default_instances: 1
    relationships:
      ###########################################################
      # Attaching a floating ip to each rabbitmq_ host
      ###########################################################

      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: rabbitmq_host_port
        type: cloudify.openstack.server_connected_to_port

  ###########################################################
  # A security group to enable access to the elasticsearch host
  # using the ports of the elsticsearch node.
  # default ports are on the range of 9200-9300 TCP
  # Both logstash and kibana need it to communicate 
  # with elasticsearch, since they run on
  # different hosts.
  ###########################################################

  elasticsearch_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: elasticsearch_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ elasticsearch, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 9200
        - remote_ip_prefix: 0.0.0.0/0
          port: 54328
          protocol: udp

  ###########################################################
  # A security group to enable access to the logstash host.
  # Should open port 5000 TCP or UDP or other configured port
  #  for Logstash to listen on.
  # This security group will be attached to the logstash_host
  ###########################################################

  logstash_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: logstash_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ logstash, port ] }

  ###########################################################
  # A security group to enable web access to the kibana host.
  # by default kibana listens on port 5601 TCP
  # This security group will be attached to the kibana_host
  ###########################################################

  kibana_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: kibana_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ kibana, port ] }

  
  rabbitmq_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: rabbitmq_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ rabbitmq, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 54328
        - remote_ip_prefix: 0.0.0.0/0
          port: 15672
        - remote_ip_prefix: 0.0.0.0/0
          port: 5672
        - remote_ip_prefix: 0.0.0.0/0
          port: 25672

  ssh_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: ssh_security_group
        description: SSH Group
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }

 ##########################################################
 # A floating ip to be attached to the rabbitmq host, 
 # as we should be able to access it
 # from any machine.
 ###########################################################
 
  rabbitmq_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  rabbitmq_master_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }
 ###########################################################
 # A floating ip to be attached to the elasticsearch host, 
 # as we should be able to access it
 # from any machine.
 ###########################################################
 #$$ Remove before commit
  elasticsearch_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }
###########################################################
# A floating ip to be attached to the logstash host, 
# as we should be able to access it
# from any machine, on any network.
###########################################################
#$$ Remove before commit
  logstash_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

###########################################################
# A floating ip to be attached to the logstash host, 
# as we should be able to access it
# from any machine, on any network.
###########################################################

  kibana_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

###########################################################

  kibana_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: kibana_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: kibana_floatingip

  logstash_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: logstash_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: logstash_floatingip

  elasticsearch_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: elasticsearch_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: elasticsearch_floatingip

  rabbitmq_master_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: rabbitmq_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: rabbitmq_master_floatingip

  rabbitmq_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: rabbitmq_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ssh_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: rabbitmq_floatingip

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
#$$ Remove before commit
  elasticsearch_endpoint:
    description: Elasticsearch endpoint
    value:
      ip_address: { get_attribute: [ elasticsearch_floatingip, floating_ip_address ] }
      port: { get_property: [ elasticsearch, port ] }
#$$ Remove before commit
  logstash_endpoint:
    description: Logstash endpoint
    value:    
      
      ip_address: { get_attribute: [ logstash_floatingip, floating_ip_address ] }
      port: { get_property: [ logstash, port ] }

  kibana_endpoint:
    description: Kibana endpoint
    value:    
      ip_address: { get_attribute: [ kibana_floatingip, floating_ip_address ] }
      port: { get_property: [ kibana, port ] }
  rabbitmq_endpoint:
    description: RabbitMQ endpoint
    value:    
      ip_address: { get_attribute: [ rabbitmq_floatingip, floating_ip_address ] }
      port: { get_property: [ rabbitmq, port ] } 

  rabbitmq_master_endpoint:
    description: RabbitMQ_Master endpoint
    value:    
      ip_address: { get_attribute: [ rabbitmq_master_floatingip, floating_ip_address ] }
      port: { get_property: [ rabbitmq_master, port ] }
