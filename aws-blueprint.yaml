tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.2/resources/rest-service/cloudify/types/types.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.4.1/cloudify_cloudinit/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/elk_stack.yaml
  - imports/elk-blueprint.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_types:

  elk.nodes.MonitoredServer:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      aws_config:
        default: *aws_config
      image_id:
        default: { get_input: ami }
      instance_type:
        default: { get_input: instance_type }
      agent_config:
        default:
          install_method: remote
          user: { get_input: agent_user }
          port: 22
          key: { get_secret: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              default:
                block_device_map:
                  '/dev/sda1':
                    delete_on_termination: true
                placement: { get_secret: availability_zone }
                user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  elasticsearch_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: elasticsearch_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: elasticsearch_floatingip

  logstash_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: logstash_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: logstash_floatingip

  kibana_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: kibana_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: kibana_floatingip

  rabbitmq_master_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: rabbitmq_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: rabbitmq_master_floatingip

  rabbitmq_host:
    type: elk.nodes.MonitoredServer
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: rabbitmq_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: rabbitmq_floatingip

  ssh_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Puppet Group
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  elasticsearch_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Elasticsearch Group
      rules:
        - ip_protocol: udp
          from_port: 54328
          to_port: 54328
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 9200
          to_port: 9200
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_property: [ elasticsearch, port ] }
          to_port: { get_property: [ elasticsearch, port ] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  logstash_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Logstash Group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [ logstash, port ] }
          to_port: { get_property: [ logstash, port ] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  kibana_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Kibana Group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [ kibana, port ] }
          to_port: { get_property: [ kibana, port ] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  rabbitmq_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: RabbitMQ Group
      rules:
        - ip_protocol: tcp
          from_port: 5672
          to_port: 5672
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 15672
          to_port: 15672
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 25672
          to_port: 25672
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 54328
          to_port: 54328
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_property: [ rabbitmq, port ] }
          to_port: { get_property: [ rabbitmq, port ] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  # Floating IPs

  rabbitmq_floatingip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  rabbitmq_master_floatingip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  elasticsearch_floatingip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  logstash_floatingip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  kibana_floatingip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_secret: agent_key_public }
        runcmd:
          - [ echo, "127.0.1.1", "$(cat /etc/hostname)", '|', "sudo", "tee", "-a", "/etc/hosts", ">/dev/null" ]
          - [ echo, "nameserver 8.8.8.8", '|', sudo, tee, '-a', "/etc/resolv.conf", ">/dev/null" ]
          - [ echo, "nameserver 8.8.8.8", '|', sudo, tee, '-a', "/etc/resolvconf/resolv.conf.d/base", ">/dev/null" ]

outputs:

  elasticsearch_endpoint:
    description: Elasticsearch endpoint
    value:
      ip_address: { get_attribute: [ elasticsearch_floatingip, aws_resource_id ] }
      port: { get_property: [ elasticsearch, port ] }

  logstash_endpoint:
    description: Logstash endpoint
    value:
      ip_address: { get_attribute: [ logstash_floatingip, aws_resource_id ] }
      port: { get_property: [ logstash, port ] }

  kibana_endpoint:
    description: Kibana endpoint
    value:
      ip_address: { get_attribute: [ kibana_floatingip, aws_resource_id ] }
      port: { get_property: [ kibana, port ] }

  rabbitmq_endpoint:
    description: RabbitMQ endpoint
    value:
      ip_address: { get_attribute: [ rabbitmq_floatingip, aws_resource_id ] }
      port: { get_property: [ rabbitmq, port ] }

  rabbitmq_master_endpoint:
    description: RabbitMQ_Master endpoint
    value:
      ip_address: { get_attribute: [ rabbitmq_master_floatingip, aws_resource_id ] }
      port: { get_property: [ rabbitmq_master, port ] }
